// <auto-generated />
using System;
using ApiServer.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ApiServer.Infrastructure.Migrations
{
    [DbContext(typeof(ApiContext))]
    partial class ApiContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.10");

            modelBuilder.Entity("ApiServer.Domain.Entities.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("CommentId");

                    b.Property<int?>("AuthorId")
                        .IsRequired()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CommentText")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "commentText");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int?>("FlashcardSetId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("FlashcardSetId");

                    b.ToTable("Comments", (string)null);
                });

            modelBuilder.Entity("ApiServer.Domain.Entities.FlashCard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("FlashCardId");

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("Difficulty")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("FlashcardSetId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("FlashcardSetId");

                    b.ToTable("FlashCards", (string)null);
                });

            modelBuilder.Entity("ApiServer.Domain.Entities.FlashcardSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("FlashcardSetId");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("FlashcardSets", (string)null);

                    b.HasAnnotation("Relational:JsonPropertyName", "set");
                });

            modelBuilder.Entity("ApiServer.Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("UserId");

                    b.Property<bool>("IsAdministrator")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "admin");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordSalt")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasAlternateKey("Username");

                    b.ToTable("Users", (string)null);

                    b.HasAnnotation("Relational:JsonPropertyName", "author");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsAdministrator = false,
                            PasswordHash = "w3zLSWUZ4dLP20icJT593RgHRq7buV0nXKRbf10uxpf8flMhTuegV94NUdUSHHDW0FbinvVAINAaX0B9mjo0dQ==",
                            PasswordSalt = "cYeT914bXdEvj7TYm4UWuOsICmhUrcsQqP6UXjsy4GKXRVJeG9u93OT5mpQ9UBBcoYl3g7h4icOi50zjTHL+MA==",
                            Username = "student"
                        },
                        new
                        {
                            Id = 2,
                            IsAdministrator = true,
                            PasswordHash = "TXNqvMXo1b5mH7O7/iI8UquPY3XR/2sNNtvk5y/F5SFskW9CaFM0wasY+tP132RGbycLBxIeh1pPLDSzspadgg==",
                            PasswordSalt = "sapB/Ozr4IJsQflqc/+yfekih1w2eMIqqrvNJ9smmExxRZMB7oGuogMUVkfu7SdB/gk97meNI4WaHCEMzfjyMg==",
                            Username = "admin"
                        });
                });

            modelBuilder.Entity("ApiServer.Domain.Entities.Comment", b =>
                {
                    b.HasOne("ApiServer.Domain.Entities.User", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiServer.Domain.Entities.FlashcardSet", "FlashcardSet")
                        .WithMany("Comment")
                        .HasForeignKey("FlashcardSetId");

                    b.Navigation("Author");

                    b.Navigation("FlashcardSet");
                });

            modelBuilder.Entity("ApiServer.Domain.Entities.FlashCard", b =>
                {
                    b.HasOne("ApiServer.Domain.Entities.FlashcardSet", "FlashcardSet")
                        .WithMany("Cards")
                        .HasForeignKey("FlashcardSetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FlashcardSet");
                });

            modelBuilder.Entity("ApiServer.Domain.Entities.FlashcardSet", b =>
                {
                    b.Navigation("Cards");

                    b.Navigation("Comment");
                });
#pragma warning restore 612, 618
        }
    }
}
